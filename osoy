#!/bin/sh

# check dependencies
isInstalled() { command -v "$*" >/dev/null; }
missingdeps=
for dep in sed awk cut tr curl git
do isInstalled "$dep" || missingdeps="$dep $missingdeps"
done
if [ -n "$missingdeps" ]
then echo "Required but not installed: $missingdeps"; exit
fi


osoydir="$HOME/.osoy"

help() {
  echo "
  Usage: osoy <operator> [flags]

  Flags:
    -d          <domain>  enforce a specific domain to clone from         v
    -a          <author>  specify packages' author                        v
    -p         <protocol> specify a protocol other than HTTPS             v
    -b          <branch>  specify a single branch as the HEAD             v
    -B             -      clone all branches                              v

  Operator:
    c|clone     <query*>  clone packages from GitHub, GitLab or Bitbucket o
    a|add       <query*>  symlik packages' executables to bin             -
    r|remove    <query*>  remove packages                                 -
    s|sync      [query*]  synchronize (all) packages                      -
    l|list      [query*]  list (all) packages                             o
    m|man       <query>   view package's README file                      -

    unistall       -      unistall osoy and all packages                  v
    netinstall     -      installation for netinstall                     o

  Query syntax: <[[domain/]author/]package>
  "
  exit
}

err() { echo "osoy: $*" && exit; }



# array implementation
join() { tr ' ' ' '; }
split() { tr ' ' ' '; }
nth() {
  i=0
  target=$1; shift
  [ $target -lt 0 ] && target=$(($#+target))
  for val in "$@"
  do
    [ $i -eq $target ] && echo "$val" | split && break
    i=$((i+1))
  done
}
slice() {
  i=0
  start=$1; shift
  end=$1; shift
  [ $start -lt 0 ] && start=$(($#+1+start))
  [ $end -lt 0 ] && end=$(($#+1+end))
  new=
  for val in "$@"
  do
    [ $i -ge $end ] && break
    [ $i -ge $start ] && new="$new $val"
    i=$((i+1))
  done
  echo "$new"
}
count() { echo $#; }
inside() {
  key=$(echo "$1" | split); shift
  is=0
  for val in "$@"
  do [ "$(echo "$val" | split)" = "$key" ] && is=1 && break
  done
  test $is -eq 1
}




toDir() {
  cd "$osoydir" 2>/dev/null || { mkdir "$osoydir" && cd "$osoydir"; } || exit
  for v in "$@"
  do cd "$v" 2>/dev/null || { mkdir "$v" && cd "$v"; } || exit
  done
}

inBin() {
  echo
}

addToBin() {
  echo
}

getQuery() {
  wholeQuery=
  for i in "$@"
  do
    id=$(echo "$i" | tr '/' ' ')
    package=$(nth -1 $id)
    author=$(nth -2 $id)
    domain=$(nth -3 $id)

    [ -z "$author" ] && [ -n "$a" ] && author=$a
    [ -z "$domain" ] && [ -n "$d" ] && domain=$d

    query=$(echo ".*$domain.*\/.*$author.*\/.*$package.*" | sed 's/\([^\\]\)\./\1[^\\\/]/g')
    if [ -z "$wholeQuery" ]
    then wholeQuery=$query
    else wholeQuery="$wholeQuery\|$query"
    fi
  done
  echo "$wholeQuery"
}

getInstalledPackages() {
  if [ -d "$osoydir" ]
  then find "$osoydir/packages" -mindepth 3 -maxdepth 3 -type d -regextype sed -regex ".*\($(getQuery $*)\)$"
  fi
}

list() {
  for pkg in $(getInstalledPackages $*)
  do
    echo "$pkg" | sed 's/^.*\/\([^\/]\+\)\/\([^\/]\+\)\/\([^\/]\+\)$/\1\/\2\/\3/'
    ls -l "$pkg" | grep '^[-l]..x' | awk '{print "  "$9}'
  done
}

packageUrl() { echo "$1://$2/$3/$4/"; }
httpStatus() { curl -s -o /dev/null -I -w "%{http_code}" "$*"; }

clone() {
  for i in "$@"
  do
    id=$(echo "$i" | tr '/' ' ')
    package=$(nth -1 $id)
    author=$(nth -2 $id)
    domain=$(nth -3 $id)

    if [ -z "$author" ]
    then
      if [ -n "$a" ]
      then author=$a
      else author=$package
      fi
    fi

    publicSources=
    if [ -n "$domain" ]
    then publicSources=$domain
    elif [ -n "$d" ]
    then publicSources=$d
    else
      echo "Querying $author/$package"
      for domain in github.com gitlab.com bitbucket.org
      do
        link=$(packageUrl $p $domain $author $package)
        status=$(httpStatus $link)
        echo "$status :: $link"
        [ "$status" = 200 ] && publicSources="$publicSources $domain"
      done
    fi

    if [ -z "$publicSources" ]
    then echo "No sources found for $author/$package. Try using flag -d <domain> to enforce a domain"
    else
      sourcesCount=$(count $publicSources)
      answer=0
      if [ $sourcesCount -eq 1 ]
      then answer=1
      else
        printf "Available sources:"
        i=0
        for domain in $publicSources
        do
          i=$((i+1))
          printf '  %d) %s' $i $domain
        done
        echo
        while [ $answer -lt 1 ] || [ $answer -gt $sourcesCount ]
        do
          printf 'Enter a number (default=1): '
          read -r answer
          if [ "$answer" = "$(printf '\n')" ]
          then answer=1
          else answer=$(printf '%d' "$answer")
          fi
        done
      fi
      domain=$(nth $((answer-1)) $publicSources)
      toDir 'packages' $domain $author
      if [ -d $package ]
      then
        echo 'Package with the same author and name has already been installed'
        echo 'Using "osoy sync <package>" is recommended'
        printf "Do you want to overwrite it? [y/N] "
        read -r answer
        if [ "$answer" = 'y' ] || [ "$answer" = 'Y' ]
        then rm -rf $package
        else continue
        fi
      fi
      gitFlags=
      [ -z "$B" ] && gitFlags="$gitFlags --single-branch"
      [ -n "$b" ] && gitFlags="$gitFlags --branch $b"
      git clone $gitFlags "$(packageUrl $p $domain $author $package)"
    fi
  done
  echo 'Done'
}



# main() {
  d=
  a=
  p=
  b=
  B=
  args=
  currentflag=
  for arg in "$@"
  do
    arg=$(echo "$arg" | join)
    if [ -n "$currentflag" ]
    then
      flag=$currentflag
      currentflag=
      case $flag in
        d) d=$arg; continue ;;
        a) a=$arg; continue ;;
        p) p=$arg; continue ;;
        b) b=$arg; continue ;;
        *) err "unknown flag '-$flag'"
      esac
    fi
    if [ "$(echo "$arg" | cut -b 1)" = '-' ]
    then
      flagBundle=$(echo "$arg" | cut -b 2- | sed 's/\(.\)/\1 /g')
      flagBundleCount=$(count $flagBundle)
      i=0
      for flag in $flagBundle
      do i=$((i+1))
        case $flag in
          B) B=1 ;;
          *)
            if [ $i -eq $flagBundleCount ]
            then currentflag=$flag
            else err "unknown flag '-$flag'"
            fi
            ;;
        esac
      done
    else args="$args $arg"
    fi
  done
  [ -n "$currentflag" ] && err "flag '-$currentflag' is either unknown or requires a value"
  [ -z "$p" ] && p='https'

  operator=$(nth 0 $args)

  [ -z $operator ] && help

  case $operator in
    c|clone)
      [ $(count $args) -lt 2 ] && err 'no packages specified'
      clone $(slice 1 -1 $args)
      ;;
    r|remove)
      [ $(count $args) -lt 2 ] && err 'no packages specified'
      remove $(slice 1 -1 $args)
      ;;
    s|sync)
      sync $(slice 1 -1 $args)
      ;;
    l|list)
      list $(slice 1 -1 $args)
      ;;
    p|path)
      path $(slice 1 -1 $args)
      ;;
    m|man)
      man $(slice 1 -1 $args)
      ;;
    uninstall)
      printf "Remove all packages and osoy? [y/N] "
      read -r answer
      { [ "$answer" = 'y' ] || [ "$answer" = 'Y' ]; } && rm -rf "$osoydir" &
      ;;
    netinstall)
      if [ -d "$osoydir"/packages/github.com/rasmusmerzin/osoy ]
      then
        echo 'Shell Manager seems to be already installed. Try updating it with "osoy sync osoy".'
      else
        printf "Install osoy to $osoydir/packages/github.com/rasmusmerzin/osoy? [Y/n] "
        read -r answer
        d='github.com'
        { [ "$answer" = 'y' ] || [ "$answer" = 'Y' ] || [ "$answer" = "$(printf '\n')" ]; } && clone osoy
      fi
      ;;
    *) err "unknown operator '$operator'" ;;
  esac
# }
